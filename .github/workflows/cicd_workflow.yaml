name: Model Deployment Pipeline

on:
  push:
    branches:
      - serving_stage_deploy

jobs:
  deploy:
    runs-on: [self-hosted, x64]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup SSH keys
        run: |
          mkdir -p serving
          echo "${{ secrets.id_rsa }}" > serving/id_rsa
          echo "${{ secrets.id_rsa_pub }}" > serving/id_rsa.pub
          chmod 600 serving/id_rsa
          chmod 644 serving/id_rsa.pub

      - name: Setup OpenStack configuration
        run: |
          mkdir -p ~/.config/openstack
          echo "${{ secrets.clouds_yaml }}" > ~/.config/openstack/clouds.yaml
          chmod 600 ~/.config/openstack/clouds.yaml
          cat ~/.config/openstack/clouds.yaml

      - name: Terraform Version
        working-directory: serving
        run: | 
          source ~/miniconda/etc/profile.d/conda.sh
          conda activate leximind
          terraform version 

  offline-eval:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Run offline evaluation
        run: |
          # Replace with your actual evaluation script
          python misc/evaluate_model.py --model-path path/to/model
      - name: Build Docker image
        run: |
          docker build -t mymodel:${{ github.sha }} .
          docker push mymodel:${{ github.sha }}

  deploy-staging:
    needs: offline-eval
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Deploy to staging
        run: |
          terraform workspace select staging || terraform workspace new staging
          terraform apply -var-file=serving/use-cases/staging.tfvars -auto-approve
      - name: Run integration/load tests
        run: |
          # Replace with your test script
          python misc/integration_test.py --endpoint https://staging.api.example.com

  deploy-canary:
    needs: deploy-staging
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Deploy to canary
        run: |
          terraform workspace select canary || terraform workspace new canary
          terraform apply -var-file=serving/use-cases/canary.tfvars -auto-approve
      - name: Monitor canary
        run: |
          # Optionally, script to check Prometheus/Grafana for errors, latency, etc.
          python misc/check_canary_metrics.py --dashboard-url https://grafana.example.com

  deploy-production:
    needs: deploy-canary
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Deploy to production
        run: |
          terraform workspace select production || terraform workspace new production
          terraform apply -var-file=serving/use-cases/production.tfvars -auto-approve
      - name: Monitor production
        run: |
          # Optionally, script to check production metrics
          python misc/check_production_metrics.py --dashboard-url https://grafana.example.com