name: Full Pipeline Deployment

on:
  push:
    branches:
      - serving_stage_deploy

jobs:
  deploy:
    runs-on: [self-hosted, x64]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup SSH keys
        run: |
          mkdir -p serving
          echo "${{ secrets.ID_RSA }}" > serving/id_rsa
          echo "${{ secrets.ID_RSA_PUB }}" > serving/id_rsa.pub
          chmod 600 serving/id_rsa
          chmod 644 serving/id_rsa.pub

      - name: Setup OpenStack configuration
        run: |
          mkdir -p ~/.config/openstack
          echo "${{ secrets.CLOUDS_YAML_COMBINED }}" > ~/.config/openstack/clouds.yaml
          chmod 600 ~/.config/openstack/clouds.yaml
          cat ~/.config/openstack/clouds.yaml

      - name: Terraform Version
        working-directory: serving
        run: | 
          source ~/miniconda/etc/profile.d/conda.sh
          conda activate leximind
          terraform version 

  staging:
    runs-on: [self-hosted, x64]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup SSH keys
        run: |
          mkdir -p serving
          echo "${{ secrets.ID_RSA }}" > serving/id_rsa
          echo "${{ secrets.ID_RSA_PUB }}" > serving/id_rsa.pub
          chmod 600 serving/id_rsa
          chmod 644 serving/id_rsa.pub

      - name: Setup OpenStack configuration
        run: |
          mkdir -p ~/.config/openstack
          echo "${{ secrets.CLOUDS_YAML_COMBINED }}" > ~/.config/openstack/clouds.yaml
          chmod 600 ~/.config/openstack/clouds.yaml
      
      - name: Setup CHI@UC app cred 
        run: |
          mkdir -p serving/scripts
          echo "${{ secrets.CHI_UC_OPENRC_SH }}" > serving/scripts/app-cred-uc-openrc.sh

      - name: Terraform Version
        working-directory: serving
        run: | 
          source ~/miniconda/etc/profile.d/conda.sh
          conda activate leximind
          terraform version 
      
      - name: Terraform Init
        working-directory: serving
        run: |
          source ~/miniconda/etc/profile.d/conda.sh
          conda activate leximind
          terraform init

      - name: Terraform Validate
        working-directory: serving
        run: |
          source ~/miniconda/etc/profile.d/conda.sh
          conda activate leximind
          terraform validate

      - name: Terraform Plan
        working-directory: serving
        run: |
          source ~/miniconda/etc/profile.d/conda.sh
          conda activate leximind
          terraform plan -var-file ./use-cases/staging.tfvars | grep -E "Plan:|No changes|Error|#"

      # - name: Wait for Approval
      #   if: always()
      #   uses: hmarr/auto-approve-action@v2
      #   with:
      #     approval_comment: "Please approve this step to proceed with Terraform Apply."

      - name: Terraform Apply
        working-directory: serving
        run: |
          source ~/miniconda/etc/profile.d/conda.sh
          conda activate leximind
          terraform apply -var-file ./use-cases/staging.tfvars -auto-approve

  canary:
    runs-on: [self-hosted, x64]
    needs: staging
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup SSH keys
        run: |
          mkdir -p serving
          echo "${{ secrets.id_rsa }}" > serving/id_rsa
          echo "${{ secrets.id_rsa_pub }}" > serving/id_rsa.pub
          chmod 600 serving/id_rsa
          chmod 644 serving/id_rsa.pub

      - name: Setup OpenStack configuration
        run: |
          mkdir -p ~/.config/openstack
          echo "${{ secrets.clouds_yaml }}" > ~/.config/openstack/clouds.yaml
          chmod 600 ~/.config/openstack/clouds.yaml
      
      - name: Setup CHI@UC app cred 
        run: |
          mkdir -p serving/scripts
          echo "${{ secrets.chi_uc_openrc_sh }}" > serving/scripts/app-cred-uc-openrc.sh

      - name: Terraform Version
        working-directory: serving
        run: | 
          source ~/miniconda/etc/profile.d/conda.sh
          conda activate leximind
          terraform version 
      
      - name: Terraform Init
        working-directory: serving
        run: terraform init

      - name: Terraform Validate
        working-directory: serving
        run: terraform validate

      - name: Terraform Plan
        working-directory: serving
        run: terraform plan -var-file ./use-cases/canary.tfvars | grep -E "Plan:|No changes|Error|#"

      - name: Wait for Approval
        if: always()
        uses: hmarr/auto-approve-action@v2
        with:
          approval_comment: "Please approve this step to proceed with Terraform Apply."

      - name: Terraform Apply
        working-directory: serving
        run: terraform apply -var-file ./use-cases/canary.tfvars -auto-approve

  production:
    runs-on: [self-hosted, x64]
    needs: canary
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup SSH keys
        run: |
          mkdir -p serving
          echo "${{ secrets.id_rsa }}" > serving/id_rsa
          echo "${{ secrets.id_rsa_pub }}" > serving/id_rsa.pub
          chmod 600 serving/id_rsa
          chmod 644 serving/id_rsa.pub

      - name: Setup OpenStack configuration
        run: |
          mkdir -p ~/.config/openstack
          echo "${{ secrets.clouds_yaml }}" > ~/.config/openstack/clouds.yaml
          chmod 600 ~/.config/openstack/clouds.yaml
      
      - name: Setup CHI@UC app cred 
        run: |
          mkdir -p serving/scripts
          echo "${{ secrets.chi_uc_openrc_sh }}" > serving/scripts/app-cred-uc-openrc.sh

      - name: Terraform Version
        working-directory: serving
        run: | 
          source ~/miniconda/etc/profile.d/conda.sh
          conda activate leximind
          terraform version 
      
      - name: Terraform Init
        working-directory: serving
        run: terraform init

      - name: Terraform Validate
        working-directory: serving
        run: terraform validate

      - name: Terraform Plan
        working-directory: serving
        run: terraform plan -var-file ./use-cases/production.tfvars | grep -E "Plan:|No changes|Error|#"

      - name: Wait for Approval
        if: always()
        uses: hmarr/auto-approve-action@v2
        with:
          approval_comment: "Please approve this step to proceed with Terraform Apply."

      - name: Terraform Apply
        working-directory: serving
        run: terraform apply -var-file ./use-cases/production.tfvars -auto-approve